package ${package}.modules.${moduleName}.controller;

import ${package}.common.annotation.LogOperation;
import ${package}.common.constant.Constant;
import ${package}.common.page.PageData;
import ${package}.common.utils.ExcelUtils;
import ${package}.common.utils.Result;
import ${package}.common.validator.AssertUtils;
import ${package}.common.validator.ValidatorUtils;
import ${package}.common.validator.group.AddGroup;
import ${package}.common.validator.group.DefaultGroup;
import ${package}.common.validator.group.UpdateGroup;
import ${package}.modules.${moduleName}.dto.${className}DTO;
import ${package}.modules.${moduleName}.excel.${className}Excel;
import ${package}.modules.${moduleName}.service.${className}Service;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import jakarta.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.Map;


/**
 * ${comments}
 *
 * @author ${author} ${email}
 * @since ${version} ${date}
 */
@RestController
@RequestMapping("${moduleName}/${pathName}")
@Tag(name="${comments}")
public class ${className}Controller {
    @Autowired
    private ${className}Service ${classname}Service;

    @GetMapping("page")
    @Operation(summary = "分页")
    @Parameters({
        @Parameter(name = Constant.PAGE, description = "当前页码，从1开始", in = ParameterIn.QUERY, required = true, ref="int") ,
        @Parameter(name = Constant.LIMIT, description = "每页显示记录数", in = ParameterIn.QUERY,required = true, ref="int") ,
        @Parameter(name = Constant.ORDER_FIELD, description = "排序字段", in = ParameterIn.QUERY, ref="String") ,
        @Parameter(name = Constant.ORDER, description = "排序方式，可选值(asc、desc)", in = ParameterIn.QUERY, ref="String")
    })
    @RequiresPermissions("${moduleName}:${pathName}:page")
    public Result<PageData<${className}DTO>> page(@Parameter(hidden = true) @RequestParam Map<String, Object> params){
        PageData<${className}DTO> page = ${classname}Service.page(params);

        return new Result<PageData<${className}DTO>>().ok(page);
    }

    @GetMapping("{id}")
    @Operation(summary = "信息")
    @RequiresPermissions("${moduleName}:${pathName}:info")
    public Result<${className}DTO> get(@PathVariable("id") Long id){
        ${className}DTO data = ${classname}Service.get(id);

        return new Result<${className}DTO>().ok(data);
    }

    @PostMapping
    @Operation(summary = "保存")
    @LogOperation("保存")
    @RequiresPermissions("${moduleName}:${pathName}:save")
    public Result save(@RequestBody ${className}DTO dto){
        //效验数据
        ValidatorUtils.validateEntity(dto, AddGroup.class, DefaultGroup.class);

        ${classname}Service.save(dto);

        return new Result();
    }

    @PutMapping
    @Operation(summary = "修改")
    @LogOperation("修改")
    @RequiresPermissions("${moduleName}:${pathName}:update")
    public Result update(@RequestBody ${className}DTO dto){
        //效验数据
        ValidatorUtils.validateEntity(dto, UpdateGroup.class, DefaultGroup.class);

        ${classname}Service.update(dto);

        return new Result();
    }

    @DeleteMapping
    @Operation(summary = "删除")
    @LogOperation("删除")
    @RequiresPermissions("${moduleName}:${pathName}:delete")
    public Result delete(@RequestBody Long[] ids){
        //效验数据
        AssertUtils.isArrayEmpty(ids, "id");

        ${classname}Service.delete(ids);

        return new Result();
    }

    @GetMapping("export")
    @Operation(summary = "导出")
    @LogOperation("导出")
    @RequiresPermissions("${moduleName}:${pathName}:export")
    public void export(@Parameter(hidden = true) @RequestParam Map<String, Object> params, HttpServletResponse response) throws Exception {
        List<${className}DTO> list = ${classname}Service.list(params);

        ExcelUtils.exportExcelToTarget(response, null, "${comments}", list, ${className}Excel.class);
    }

}
